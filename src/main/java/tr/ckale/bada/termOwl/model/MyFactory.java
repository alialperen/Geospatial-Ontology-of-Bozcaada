package tr.ckale.bada.termOwl.model;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

import tr.ckale.bada.termOwl.model.impl.*;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Wed Dec 21 09:21:49 MSK 2016 by Alperen
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#administrativeRegion
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#administrativeRegion", AdministrativeRegion.class, DefaultAdministrativeRegion.class);
    }

    /**
     * Creates an instance of type AdministrativeRegion.  Modifies the underlying ontology.
     */
    public AdministrativeRegion createAdministrativeRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADMINISTRATIVEREGION, DefaultAdministrativeRegion.class);
    }

    /**
     * Gets an instance of type AdministrativeRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AdministrativeRegion getAdministrativeRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADMINISTRATIVEREGION, DefaultAdministrativeRegion.class);
    }

    /**
     * Gets all instances of AdministrativeRegion from the ontology.
     */
    public Collection<? extends AdministrativeRegion> getAllAdministrativeRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADMINISTRATIVEREGION, DefaultAdministrativeRegion.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#agriculturalRegion
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#agriculturalRegion", AgriculturalRegion.class, DefaultAgriculturalRegion.class);
    }

    /**
     * Creates an instance of type AgriculturalRegion.  Modifies the underlying ontology.
     */
    public AgriculturalRegion createAgriculturalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGRICULTURALREGION, DefaultAgriculturalRegion.class);
    }

    /**
     * Gets an instance of type AgriculturalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AgriculturalRegion getAgriculturalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGRICULTURALREGION, DefaultAgriculturalRegion.class);
    }

    /**
     * Gets all instances of AgriculturalRegion from the ontology.
     */
    public Collection<? extends AgriculturalRegion> getAllAgriculturalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGRICULTURALREGION, DefaultAgriculturalRegion.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#area
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#area", Area.class, DefaultArea.class);
    }

    /**
     * Creates an instance of type Area.  Modifies the underlying ontology.
     */
    public Area createArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AREA, DefaultArea.class);
    }

    /**
     * Gets an instance of type Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Area getArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AREA, DefaultArea.class);
    }

    /**
     * Gets all instances of Area from the ontology.
     */
    public Collection<? extends Area> getAllAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AREA, DefaultArea.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#atm
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#atm", Atm.class, DefaultAtm.class);
    }

    /**
     * Creates an instance of type Atm.  Modifies the underlying ontology.
     */
    public Atm createAtm(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATM, DefaultAtm.class);
    }

    /**
     * Gets an instance of type Atm with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Atm getAtm(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATM, DefaultAtm.class);
    }

    /**
     * Gets all instances of Atm from the ontology.
     */
    public Collection<? extends Atm> getAllAtmInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATM, DefaultAtm.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#axis
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#axis", Axis.class, DefaultAxis.class);
    }

    /**
     * Creates an instance of type Axis.  Modifies the underlying ontology.
     */
    public Axis createAxis(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AXIS, DefaultAxis.class);
    }

    /**
     * Gets an instance of type Axis with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Axis getAxis(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AXIS, DefaultAxis.class);
    }

    /**
     * Gets all instances of Axis from the ontology.
     */
    public Collection<? extends Axis> getAllAxisInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AXIS, DefaultAxis.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#bank
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#bank", Bank.class, DefaultBank.class);
    }

    /**
     * Creates an instance of type Bank.  Modifies the underlying ontology.
     */
    public Bank createBank(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BANK, DefaultBank.class);
    }

    /**
     * Gets an instance of type Bank with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bank getBank(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BANK, DefaultBank.class);
    }

    /**
     * Gets all instances of Bank from the ontology.
     */
    public Collection<? extends Bank> getAllBankInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BANK, DefaultBank.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#bar
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#bar", Bar.class, DefaultBar.class);
    }

    /**
     * Creates an instance of type Bar.  Modifies the underlying ontology.
     */
    public Bar createBar(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BAR, DefaultBar.class);
    }

    /**
     * Gets an instance of type Bar with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bar getBar(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BAR, DefaultBar.class);
    }

    /**
     * Gets all instances of Bar from the ontology.
     */
    public Collection<? extends Bar> getAllBarInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BAR, DefaultBar.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#barracks
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#barracks", Barracks.class, DefaultBarracks.class);
    }

    /**
     * Creates an instance of type Barracks.  Modifies the underlying ontology.
     */
    public Barracks createBarracks(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BARRACKS, DefaultBarracks.class);
    }

    /**
     * Gets an instance of type Barracks with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Barracks getBarracks(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BARRACKS, DefaultBarracks.class);
    }

    /**
     * Gets all instances of Barracks from the ontology.
     */
    public Collection<? extends Barracks> getAllBarracksInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BARRACKS, DefaultBarracks.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#beach
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#beach", Beach.class, DefaultBeach.class);
    }

    /**
     * Creates an instance of type Beach.  Modifies the underlying ontology.
     */
    public Beach createBeach(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BEACH, DefaultBeach.class);
    }

    /**
     * Gets an instance of type Beach with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Beach getBeach(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BEACH, DefaultBeach.class);
    }

    /**
     * Gets all instances of Beach from the ontology.
     */
    public Collection<? extends Beach> getAllBeachInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BEACH, DefaultBeach.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#boundingBox
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#boundingBox", BoundingBox.class, DefaultBoundingBox.class);
    }

    /**
     * Creates an instance of type BoundingBox.  Modifies the underlying ontology.
     */
    public BoundingBox createBoundingBox(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOUNDINGBOX, DefaultBoundingBox.class);
    }

    /**
     * Gets an instance of type BoundingBox with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BoundingBox getBoundingBox(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOUNDINGBOX, DefaultBoundingBox.class);
    }

    /**
     * Gets all instances of BoundingBox from the ontology.
     */
    public Collection<? extends BoundingBox> getAllBoundingBoxInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOUNDINGBOX, DefaultBoundingBox.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#bridge
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#bridge", Bridge.class, DefaultBridge.class);
    }

    /**
     * Creates an instance of type Bridge.  Modifies the underlying ontology.
     */
    public Bridge createBridge(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BRIDGE, DefaultBridge.class);
    }

    /**
     * Gets an instance of type Bridge with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bridge getBridge(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BRIDGE, DefaultBridge.class);
    }

    /**
     * Gets all instances of Bridge from the ontology.
     */
    public Collection<? extends Bridge> getAllBridgeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BRIDGE, DefaultBridge.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#building
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#building", Building.class, DefaultBuilding.class);
    }

    /**
     * Creates an instance of type Building.  Modifies the underlying ontology.
     */
    public Building createBuilding(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUILDING, DefaultBuilding.class);
    }

    /**
     * Gets an instance of type Building with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Building getBuilding(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUILDING, DefaultBuilding.class);
    }

    /**
     * Gets all instances of Building from the ontology.
     */
    public Collection<? extends Building> getAllBuildingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUILDING, DefaultBuilding.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#businessCenter
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#businessCenter", BusinessCenter.class, DefaultBusinessCenter.class);
    }

    /**
     * Creates an instance of type BusinessCenter.  Modifies the underlying ontology.
     */
    public BusinessCenter createBusinessCenter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUSINESSCENTER, DefaultBusinessCenter.class);
    }

    /**
     * Gets an instance of type BusinessCenter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BusinessCenter getBusinessCenter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUSINESSCENTER, DefaultBusinessCenter.class);
    }

    /**
     * Gets all instances of BusinessCenter from the ontology.
     */
    public Collection<? extends BusinessCenter> getAllBusinessCenterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUSINESSCENTER, DefaultBusinessCenter.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#cafeeHouse
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#cafeeHouse", CafeeHouse.class, DefaultCafeeHouse.class);
    }

    /**
     * Creates an instance of type CafeeHouse.  Modifies the underlying ontology.
     */
    public CafeeHouse createCafeeHouse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAFEEHOUSE, DefaultCafeeHouse.class);
    }

    /**
     * Gets an instance of type CafeeHouse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CafeeHouse getCafeeHouse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAFEEHOUSE, DefaultCafeeHouse.class);
    }

    /**
     * Gets all instances of CafeeHouse from the ontology.
     */
    public Collection<? extends CafeeHouse> getAllCafeeHouseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAFEEHOUSE, DefaultCafeeHouse.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#cartesianCS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#cartesianCS", CartesianCS.class, DefaultCartesianCS.class);
    }

    /**
     * Creates an instance of type CartesianCS.  Modifies the underlying ontology.
     */
    public CartesianCS createCartesianCS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CARTESIANCS, DefaultCartesianCS.class);
    }

    /**
     * Gets an instance of type CartesianCS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CartesianCS getCartesianCS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CARTESIANCS, DefaultCartesianCS.class);
    }

    /**
     * Gets all instances of CartesianCS from the ontology.
     */
    public Collection<? extends CartesianCS> getAllCartesianCSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CARTESIANCS, DefaultCartesianCS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#castle
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#castle", Castle.class, DefaultCastle.class);
    }

    /**
     * Creates an instance of type Castle.  Modifies the underlying ontology.
     */
    public Castle createCastle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CASTLE, DefaultCastle.class);
    }

    /**
     * Gets an instance of type Castle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Castle getCastle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CASTLE, DefaultCastle.class);
    }

    /**
     * Gets all instances of Castle from the ontology.
     */
    public Collection<? extends Castle> getAllCastleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CASTLE, DefaultCastle.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#church
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#church", Church.class, DefaultChurch.class);
    }

    /**
     * Creates an instance of type Church.  Modifies the underlying ontology.
     */
    public Church createChurch(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHURCH, DefaultChurch.class);
    }

    /**
     * Gets an instance of type Church with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Church getChurch(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHURCH, DefaultChurch.class);
    }

    /**
     * Gets all instances of Church from the ontology.
     */
    public Collection<? extends Church> getAllChurchInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHURCH, DefaultChurch.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coastal
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coastal", Coastal.class, DefaultCoastal.class);
    }

    /**
     * Creates an instance of type Coastal.  Modifies the underlying ontology.
     */
    public Coastal createCoastal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COASTAL, DefaultCoastal.class);
    }

    /**
     * Gets an instance of type Coastal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Coastal getCoastal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COASTAL, DefaultCoastal.class);
    }

    /**
     * Gets all instances of Coastal from the ontology.
     */
    public Collection<? extends Coastal> getAllCoastalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COASTAL, DefaultCoastal.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coastalLandForm
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coastalLandForm", CoastalLandForm.class, DefaultCoastalLandForm.class);
    }

    /**
     * Creates an instance of type CoastalLandForm.  Modifies the underlying ontology.
     */
    public CoastalLandForm createCoastalLandForm(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COASTALLANDFORM, DefaultCoastalLandForm.class);
    }

    /**
     * Gets an instance of type CoastalLandForm with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CoastalLandForm getCoastalLandForm(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COASTALLANDFORM, DefaultCoastalLandForm.class);
    }

    /**
     * Gets all instances of CoastalLandForm from the ontology.
     */
    public Collection<? extends CoastalLandForm> getAllCoastalLandFormInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COASTALLANDFORM, DefaultCoastalLandForm.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#compoundCRS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#compoundCRS", CompoundCRS.class, DefaultCompoundCRS.class);
    }

    /**
     * Creates an instance of type CompoundCRS.  Modifies the underlying ontology.
     */
    public CompoundCRS createCompoundCRS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPOUNDCRS, DefaultCompoundCRS.class);
    }

    /**
     * Gets an instance of type CompoundCRS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CompoundCRS getCompoundCRS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPOUNDCRS, DefaultCompoundCRS.class);
    }

    /**
     * Gets all instances of CompoundCRS from the ontology.
     */
    public Collection<? extends CompoundCRS> getAllCompoundCRSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPOUNDCRS, DefaultCompoundCRS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#continent
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#continent", Continent.class, DefaultContinent.class);
    }

    /**
     * Creates an instance of type Continent.  Modifies the underlying ontology.
     */
    public Continent createContinent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTINENT, DefaultContinent.class);
    }

    /**
     * Gets an instance of type Continent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Continent getContinent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTINENT, DefaultContinent.class);
    }

    /**
     * Gets all instances of Continent from the ontology.
     */
    public Collection<? extends Continent> getAllContinentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTINENT, DefaultContinent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coordinateReferenceSystem
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coordinateReferenceSystem", CoordinateReferenceSystem.class, DefaultCoordinateReferenceSystem.class);
    }

    /**
     * Creates an instance of type CoordinateReferenceSystem.  Modifies the underlying ontology.
     */
    public CoordinateReferenceSystem createCoordinateReferenceSystem(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COORDINATEREFERENCESYSTEM, DefaultCoordinateReferenceSystem.class);
    }

    /**
     * Gets an instance of type CoordinateReferenceSystem with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CoordinateReferenceSystem getCoordinateReferenceSystem(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COORDINATEREFERENCESYSTEM, DefaultCoordinateReferenceSystem.class);
    }

    /**
     * Gets all instances of CoordinateReferenceSystem from the ontology.
     */
    public Collection<? extends CoordinateReferenceSystem> getAllCoordinateReferenceSystemInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COORDINATEREFERENCESYSTEM, DefaultCoordinateReferenceSystem.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coordinateSystem
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#coordinateSystem", CoordinateSystem.class, DefaultCoordinateSystem.class);
    }

    /**
     * Creates an instance of type CoordinateSystem.  Modifies the underlying ontology.
     */
    public CoordinateSystem createCoordinateSystem(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COORDINATESYSTEM, DefaultCoordinateSystem.class);
    }

    /**
     * Gets an instance of type CoordinateSystem with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CoordinateSystem getCoordinateSystem(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COORDINATESYSTEM, DefaultCoordinateSystem.class);
    }

    /**
     * Gets all instances of CoordinateSystem from the ontology.
     */
    public Collection<? extends CoordinateSystem> getAllCoordinateSystemInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COORDINATESYSTEM, DefaultCoordinateSystem.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#datum
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#datum", Datum.class, DefaultDatum.class);
    }

    /**
     * Creates an instance of type Datum.  Modifies the underlying ontology.
     */
    public Datum createDatum(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATUM, DefaultDatum.class);
    }

    /**
     * Gets an instance of type Datum with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Datum getDatum(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATUM, DefaultDatum.class);
    }

    /**
     * Gets all instances of Datum from the ontology.
     */
    public Collection<? extends Datum> getAllDatumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATUM, DefaultDatum.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#department
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#department", Department.class, DefaultDepartment.class);
    }

    /**
     * Creates an instance of type Department.  Modifies the underlying ontology.
     */
    public Department createDepartment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }

    /**
     * Gets an instance of type Department with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Department getDepartment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }

    /**
     * Gets all instances of Department from the ontology.
     */
    public Collection<? extends Department> getAllDepartmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPARTMENT, DefaultDepartment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#drainageBasin
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#drainageBasin", DrainageBasin.class, DefaultDrainageBasin.class);
    }

    /**
     * Creates an instance of type DrainageBasin.  Modifies the underlying ontology.
     */
    public DrainageBasin createDrainageBasin(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRAINAGEBASIN, DefaultDrainageBasin.class);
    }

    /**
     * Gets an instance of type DrainageBasin with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DrainageBasin getDrainageBasin(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRAINAGEBASIN, DefaultDrainageBasin.class);
    }

    /**
     * Gets all instances of DrainageBasin from the ontology.
     */
    public Collection<? extends DrainageBasin> getAllDrainageBasinInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRAINAGEBASIN, DefaultDrainageBasin.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#elipsoidalCS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#elipsoidalCS", ElipsoidalCS.class, DefaultElipsoidalCS.class);
    }

    /**
     * Creates an instance of type ElipsoidalCS.  Modifies the underlying ontology.
     */
    public ElipsoidalCS createElipsoidalCS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELIPSOIDALCS, DefaultElipsoidalCS.class);
    }

    /**
     * Gets an instance of type ElipsoidalCS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ElipsoidalCS getElipsoidalCS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELIPSOIDALCS, DefaultElipsoidalCS.class);
    }

    /**
     * Gets all instances of ElipsoidalCS from the ontology.
     */
    public Collection<? extends ElipsoidalCS> getAllElipsoidalCSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELIPSOIDALCS, DefaultElipsoidalCS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#ellipsoid
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#ellipsoid", Ellipsoid.class, DefaultEllipsoid.class);
    }

    /**
     * Creates an instance of type Ellipsoid.  Modifies the underlying ontology.
     */
    public Ellipsoid createEllipsoid(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ELLIPSOID, DefaultEllipsoid.class);
    }

    /**
     * Gets an instance of type Ellipsoid with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ellipsoid getEllipsoid(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ELLIPSOID, DefaultEllipsoid.class);
    }

    /**
     * Gets all instances of Ellipsoid from the ontology.
     */
    public Collection<? extends Ellipsoid> getAllEllipsoidInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ELLIPSOID, DefaultEllipsoid.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#factory
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#factory", Factory.class, DefaultFactory.class);
    }

    /**
     * Creates an instance of type Factory.  Modifies the underlying ontology.
     */
    public Factory createFactory(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FACTORY, DefaultFactory.class);
    }

    /**
     * Gets an instance of type Factory with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Factory getFactory(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FACTORY, DefaultFactory.class);
    }

    /**
     * Gets all instances of Factory from the ontology.
     */
    public Collection<? extends Factory> getAllFactoryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FACTORY, DefaultFactory.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#falez
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#falez", Falez.class, DefaultFalez.class);
    }

    /**
     * Creates an instance of type Falez.  Modifies the underlying ontology.
     */
    public Falez createFalez(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FALEZ, DefaultFalez.class);
    }

    /**
     * Gets an instance of type Falez with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Falez getFalez(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FALEZ, DefaultFalez.class);
    }

    /**
     * Gets all instances of Falez from the ontology.
     */
    public Collection<? extends Falez> getAllFalezInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FALEZ, DefaultFalez.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#farm
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#farm", Farm.class, DefaultFarm.class);
    }

    /**
     * Creates an instance of type Farm.  Modifies the underlying ontology.
     */
    public Farm createFarm(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FARM, DefaultFarm.class);
    }

    /**
     * Gets an instance of type Farm with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Farm getFarm(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FARM, DefaultFarm.class);
    }

    /**
     * Gets all instances of Farm from the ontology.
     */
    public Collection<? extends Farm> getAllFarmInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FARM, DefaultFarm.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#forest
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#forest", Forest.class, DefaultForest.class);
    }

    /**
     * Creates an instance of type Forest.  Modifies the underlying ontology.
     */
    public Forest createForest(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOREST, DefaultForest.class);
    }

    /**
     * Gets an instance of type Forest with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Forest getForest(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOREST, DefaultForest.class);
    }

    /**
     * Gets all instances of Forest from the ontology.
     */
    public Collection<? extends Forest> getAllForestInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOREST, DefaultForest.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#formalArea
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#formalArea", FormalArea.class, DefaultFormalArea.class);
    }

    /**
     * Creates an instance of type FormalArea.  Modifies the underlying ontology.
     */
    public FormalArea createFormalArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORMALAREA, DefaultFormalArea.class);
    }

    /**
     * Gets an instance of type FormalArea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FormalArea getFormalArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORMALAREA, DefaultFormalArea.class);
    }

    /**
     * Gets all instances of FormalArea from the ontology.
     */
    public Collection<? extends FormalArea> getAllFormalAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORMALAREA, DefaultFormalArea.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#formalRegion
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#formalRegion", FormalRegion.class, DefaultFormalRegion.class);
    }

    /**
     * Creates an instance of type FormalRegion.  Modifies the underlying ontology.
     */
    public FormalRegion createFormalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORMALREGION, DefaultFormalRegion.class);
    }

    /**
     * Gets an instance of type FormalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FormalRegion getFormalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORMALREGION, DefaultFormalRegion.class);
    }

    /**
     * Gets all instances of FormalRegion from the ontology.
     */
    public Collection<? extends FormalRegion> getAllFormalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORMALREGION, DefaultFormalRegion.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#functionalArea
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#functionalArea", FunctionalArea.class, DefaultFunctionalArea.class);
    }

    /**
     * Creates an instance of type FunctionalArea.  Modifies the underlying ontology.
     */
    public FunctionalArea createFunctionalArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTIONALAREA, DefaultFunctionalArea.class);
    }

    /**
     * Gets an instance of type FunctionalArea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FunctionalArea getFunctionalArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTIONALAREA, DefaultFunctionalArea.class);
    }

    /**
     * Gets all instances of FunctionalArea from the ontology.
     */
    public Collection<? extends FunctionalArea> getAllFunctionalAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTIONALAREA, DefaultFunctionalArea.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#functionalRegion
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#functionalRegion", FunctionalRegion.class, DefaultFunctionalRegion.class);
    }

    /**
     * Creates an instance of type FunctionalRegion.  Modifies the underlying ontology.
     */
    public FunctionalRegion createFunctionalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTIONALREGION, DefaultFunctionalRegion.class);
    }

    /**
     * Gets an instance of type FunctionalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FunctionalRegion getFunctionalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTIONALREGION, DefaultFunctionalRegion.class);
    }

    /**
     * Gets all instances of FunctionalRegion from the ontology.
     */
    public Collection<? extends FunctionalRegion> getAllFunctionalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTIONALREGION, DefaultFunctionalRegion.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#garden
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#garden", Garden.class, DefaultGarden.class);
    }

    /**
     * Creates an instance of type Garden.  Modifies the underlying ontology.
     */
    public Garden createGarden(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GARDEN, DefaultGarden.class);
    }

    /**
     * Gets an instance of type Garden with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Garden getGarden(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GARDEN, DefaultGarden.class);
    }

    /**
     * Gets all instances of Garden from the ontology.
     */
    public Collection<? extends Garden> getAllGardenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GARDEN, DefaultGarden.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#geocentricCRS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#geocentricCRS", GeocentricCRS.class, DefaultGeocentricCRS.class);
    }

    /**
     * Creates an instance of type GeocentricCRS.  Modifies the underlying ontology.
     */
    public GeocentricCRS createGeocentricCRS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GEOCENTRICCRS, DefaultGeocentricCRS.class);
    }

    /**
     * Gets an instance of type GeocentricCRS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GeocentricCRS getGeocentricCRS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GEOCENTRICCRS, DefaultGeocentricCRS.class);
    }

    /**
     * Gets all instances of GeocentricCRS from the ontology.
     */
    public Collection<? extends GeocentricCRS> getAllGeocentricCRSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GEOCENTRICCRS, DefaultGeocentricCRS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#geodeticDatum
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#geodeticDatum", GeodeticDatum.class, DefaultGeodeticDatum.class);
    }

    /**
     * Creates an instance of type GeodeticDatum.  Modifies the underlying ontology.
     */
    public GeodeticDatum createGeodeticDatum(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GEODETICDATUM, DefaultGeodeticDatum.class);
    }

    /**
     * Gets an instance of type GeodeticDatum with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GeodeticDatum getGeodeticDatum(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GEODETICDATUM, DefaultGeodeticDatum.class);
    }

    /**
     * Gets all instances of GeodeticDatum from the ontology.
     */
    public Collection<? extends GeodeticDatum> getAllGeodeticDatumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GEODETICDATUM, DefaultGeodeticDatum.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#governorsOffice
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#governorsOffice", GovernorsOffice.class, DefaultGovernorsOffice.class);
    }

    /**
     * Creates an instance of type GovernorsOffice.  Modifies the underlying ontology.
     */
    public GovernorsOffice createGovernorsOffice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GOVERNORSOFFICE, DefaultGovernorsOffice.class);
    }

    /**
     * Gets an instance of type GovernorsOffice with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GovernorsOffice getGovernorsOffice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GOVERNORSOFFICE, DefaultGovernorsOffice.class);
    }

    /**
     * Gets all instances of GovernorsOffice from the ontology.
     */
    public Collection<? extends GovernorsOffice> getAllGovernorsOfficeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GOVERNORSOFFICE, DefaultGovernorsOffice.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#graveyard
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#graveyard", Graveyard.class, DefaultGraveyard.class);
    }

    /**
     * Creates an instance of type Graveyard.  Modifies the underlying ontology.
     */
    public Graveyard createGraveyard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRAVEYARD, DefaultGraveyard.class);
    }

    /**
     * Gets an instance of type Graveyard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Graveyard getGraveyard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRAVEYARD, DefaultGraveyard.class);
    }

    /**
     * Gets all instances of Graveyard from the ontology.
     */
    public Collection<? extends Graveyard> getAllGraveyardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRAVEYARD, DefaultGraveyard.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#hill
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#hill", Hill.class, DefaultHill.class);
    }

    /**
     * Creates an instance of type Hill.  Modifies the underlying ontology.
     */
    public Hill createHill(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HILL, DefaultHill.class);
    }

    /**
     * Gets an instance of type Hill with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hill getHill(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HILL, DefaultHill.class);
    }

    /**
     * Gets all instances of Hill from the ontology.
     */
    public Collection<? extends Hill> getAllHillInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HILL, DefaultHill.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#holidayVillage
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#holidayVillage", HolidayVillage.class, DefaultHolidayVillage.class);
    }

    /**
     * Creates an instance of type HolidayVillage.  Modifies the underlying ontology.
     */
    public HolidayVillage createHolidayVillage(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOLIDAYVILLAGE, DefaultHolidayVillage.class);
    }

    /**
     * Gets an instance of type HolidayVillage with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HolidayVillage getHolidayVillage(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOLIDAYVILLAGE, DefaultHolidayVillage.class);
    }

    /**
     * Gets all instances of HolidayVillage from the ontology.
     */
    public Collection<? extends HolidayVillage> getAllHolidayVillageInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOLIDAYVILLAGE, DefaultHolidayVillage.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#hospital
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#hospital", Hospital.class, DefaultHospital.class);
    }

    /**
     * Creates an instance of type Hospital.  Modifies the underlying ontology.
     */
    public Hospital createHospital(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOSPITAL, DefaultHospital.class);
    }

    /**
     * Gets an instance of type Hospital with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hospital getHospital(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOSPITAL, DefaultHospital.class);
    }

    /**
     * Gets all instances of Hospital from the ontology.
     */
    public Collection<? extends Hospital> getAllHospitalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOSPITAL, DefaultHospital.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#hotel
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#hotel", Hotel.class, DefaultHotel.class);
    }

    /**
     * Creates an instance of type Hotel.  Modifies the underlying ontology.
     */
    public Hotel createHotel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets an instance of type Hotel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hotel getHotel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets all instances of Hotel from the ontology.
     */
    public Collection<? extends Hotel> getAllHotelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#humanMadeStructure
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#humanMadeStructure", HumanMadeStructure.class, DefaultHumanMadeStructure.class);
    }

    /**
     * Creates an instance of type HumanMadeStructure.  Modifies the underlying ontology.
     */
    public HumanMadeStructure createHumanMadeStructure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HUMANMADESTRUCTURE, DefaultHumanMadeStructure.class);
    }

    /**
     * Gets an instance of type HumanMadeStructure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HumanMadeStructure getHumanMadeStructure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HUMANMADESTRUCTURE, DefaultHumanMadeStructure.class);
    }

    /**
     * Gets all instances of HumanMadeStructure from the ontology.
     */
    public Collection<? extends HumanMadeStructure> getAllHumanMadeStructureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HUMANMADESTRUCTURE, DefaultHumanMadeStructure.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#island
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#island", Island.class, DefaultIsland.class);
    }

    /**
     * Creates an instance of type Island.  Modifies the underlying ontology.
     */
    public Island createIsland(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ISLAND, DefaultIsland.class);
    }

    /**
     * Gets an instance of type Island with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Island getIsland(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ISLAND, DefaultIsland.class);
    }

    /**
     * Gets all instances of Island from the ontology.
     */
    public Collection<? extends Island> getAllIslandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ISLAND, DefaultIsland.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#lake
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#lake", Lake.class, DefaultLake.class);
    }

    /**
     * Creates an instance of type Lake.  Modifies the underlying ontology.
     */
    public Lake createLake(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LAKE, DefaultLake.class);
    }

    /**
     * Gets an instance of type Lake with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Lake getLake(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LAKE, DefaultLake.class);
    }

    /**
     * Gets all instances of Lake from the ontology.
     */
    public Collection<? extends Lake> getAllLakeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LAKE, DefaultLake.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#landForm
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#landForm", LandForm.class, DefaultLandForm.class);
    }

    /**
     * Creates an instance of type LandForm.  Modifies the underlying ontology.
     */
    public LandForm createLandForm(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LANDFORM, DefaultLandForm.class);
    }

    /**
     * Gets an instance of type LandForm with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LandForm getLandForm(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LANDFORM, DefaultLandForm.class);
    }

    /**
     * Gets all instances of LandForm from the ontology.
     */
    public Collection<? extends LandForm> getAllLandFormInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LANDFORM, DefaultLandForm.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#library
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#library", Library.class, DefaultLibrary.class);
    }

    /**
     * Creates an instance of type Library.  Modifies the underlying ontology.
     */
    public Library createLibrary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIBRARY, DefaultLibrary.class);
    }

    /**
     * Gets an instance of type Library with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Library getLibrary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIBRARY, DefaultLibrary.class);
    }

    /**
     * Gets all instances of Library from the ontology.
     */
    public Collection<? extends Library> getAllLibraryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIBRARY, DefaultLibrary.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#mosque
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#mosque", Mosque.class, DefaultMosque.class);
    }

    /**
     * Creates an instance of type Mosque.  Modifies the underlying ontology.
     */
    public Mosque createMosque(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOSQUE, DefaultMosque.class);
    }

    /**
     * Gets an instance of type Mosque with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mosque getMosque(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOSQUE, DefaultMosque.class);
    }

    /**
     * Gets all instances of Mosque from the ontology.
     */
    public Collection<? extends Mosque> getAllMosqueInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOSQUE, DefaultMosque.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#mountain
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#mountain", Mountain.class, DefaultMountain.class);
    }

    /**
     * Creates an instance of type Mountain.  Modifies the underlying ontology.
     */
    public Mountain createMountain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOUNTAIN, DefaultMountain.class);
    }

    /**
     * Gets an instance of type Mountain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mountain getMountain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOUNTAIN, DefaultMountain.class);
    }

    /**
     * Gets all instances of Mountain from the ontology.
     */
    public Collection<? extends Mountain> getAllMountainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOUNTAIN, DefaultMountain.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#municipality
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#municipality", Municipality.class, DefaultMunicipality.class);
    }

    /**
     * Creates an instance of type Municipality.  Modifies the underlying ontology.
     */
    public Municipality createMunicipality(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MUNICIPALITY, DefaultMunicipality.class);
    }

    /**
     * Gets an instance of type Municipality with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Municipality getMunicipality(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MUNICIPALITY, DefaultMunicipality.class);
    }

    /**
     * Gets all instances of Municipality from the ontology.
     */
    public Collection<? extends Municipality> getAllMunicipalityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MUNICIPALITY, DefaultMunicipality.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#naturalFeature
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#naturalFeature", NaturalFeature.class, DefaultNaturalFeature.class);
    }

    /**
     * Creates an instance of type NaturalFeature.  Modifies the underlying ontology.
     */
    public NaturalFeature createNaturalFeature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NATURALFEATURE, DefaultNaturalFeature.class);
    }

    /**
     * Gets an instance of type NaturalFeature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NaturalFeature getNaturalFeature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NATURALFEATURE, DefaultNaturalFeature.class);
    }

    /**
     * Gets all instances of NaturalFeature from the ontology.
     */
    public Collection<? extends NaturalFeature> getAllNaturalFeatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NATURALFEATURE, DefaultNaturalFeature.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#ocean
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#ocean", Ocean.class, DefaultOcean.class);
    }

    /**
     * Creates an instance of type Ocean.  Modifies the underlying ontology.
     */
    public Ocean createOcean(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCEAN, DefaultOcean.class);
    }

    /**
     * Gets an instance of type Ocean with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ocean getOcean(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCEAN, DefaultOcean.class);
    }

    /**
     * Gets all instances of Ocean from the ontology.
     */
    public Collection<? extends Ocean> getAllOceanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCEAN, DefaultOcean.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#physicalFeature
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#physicalFeature", PhysicalFeature.class, DefaultPhysicalFeature.class);
    }

    /**
     * Creates an instance of type PhysicalFeature.  Modifies the underlying ontology.
     */
    public PhysicalFeature createPhysicalFeature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICALFEATURE, DefaultPhysicalFeature.class);
    }

    /**
     * Gets an instance of type PhysicalFeature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhysicalFeature getPhysicalFeature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICALFEATURE, DefaultPhysicalFeature.class);
    }

    /**
     * Gets all instances of PhysicalFeature from the ontology.
     */
    public Collection<? extends PhysicalFeature> getAllPhysicalFeatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICALFEATURE, DefaultPhysicalFeature.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#pier
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#pier", Pier.class, DefaultPier.class);
    }

    /**
     * Creates an instance of type Pier.  Modifies the underlying ontology.
     */
    public Pier createPier(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PIER, DefaultPier.class);
    }

    /**
     * Gets an instance of type Pier with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pier getPier(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PIER, DefaultPier.class);
    }

    /**
     * Gets all instances of Pier from the ontology.
     */
    public Collection<? extends Pier> getAllPierInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PIER, DefaultPier.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#place
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#place", Place.class, DefaultPlace.class);
    }

    /**
     * Creates an instance of type Place.  Modifies the underlying ontology.
     */
    public Place createPlace(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets an instance of type Place with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Place getPlace(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets all instances of Place from the ontology.
     */
    public Collection<? extends Place> getAllPlaceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#policeStation
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#policeStation", PoliceStation.class, DefaultPoliceStation.class);
    }

    /**
     * Creates an instance of type PoliceStation.  Modifies the underlying ontology.
     */
    public PoliceStation createPoliceStation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POLICESTATION, DefaultPoliceStation.class);
    }

    /**
     * Gets an instance of type PoliceStation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PoliceStation getPoliceStation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POLICESTATION, DefaultPoliceStation.class);
    }

    /**
     * Gets all instances of PoliceStation from the ontology.
     */
    public Collection<? extends PoliceStation> getAllPoliceStationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POLICESTATION, DefaultPoliceStation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#pool
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#pool", Pool.class, DefaultPool.class);
    }

    /**
     * Creates an instance of type Pool.  Modifies the underlying ontology.
     */
    public Pool createPool(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POOL, DefaultPool.class);
    }

    /**
     * Gets an instance of type Pool with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pool getPool(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POOL, DefaultPool.class);
    }

    /**
     * Gets all instances of Pool from the ontology.
     */
    public Collection<? extends Pool> getAllPoolInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POOL, DefaultPool.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#port
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#port", Port.class, DefaultPort.class);
    }

    /**
     * Creates an instance of type Port.  Modifies the underlying ontology.
     */
    public Port createPort(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PORT, DefaultPort.class);
    }

    /**
     * Gets an instance of type Port with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Port getPort(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PORT, DefaultPort.class);
    }

    /**
     * Gets all instances of Port from the ontology.
     */
    public Collection<? extends Port> getAllPortInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PORT, DefaultPort.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#postOffice
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#postOffice", PostOffice.class, DefaultPostOffice.class);
    }

    /**
     * Creates an instance of type PostOffice.  Modifies the underlying ontology.
     */
    public PostOffice createPostOffice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POSTOFFICE, DefaultPostOffice.class);
    }

    /**
     * Gets an instance of type PostOffice with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PostOffice getPostOffice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POSTOFFICE, DefaultPostOffice.class);
    }

    /**
     * Gets all instances of PostOffice from the ontology.
     */
    public Collection<? extends PostOffice> getAllPostOfficeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POSTOFFICE, DefaultPostOffice.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#primaryCRS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#primaryCRS", PrimaryCRS.class, DefaultPrimaryCRS.class);
    }

    /**
     * Creates an instance of type PrimaryCRS.  Modifies the underlying ontology.
     */
    public PrimaryCRS createPrimaryCRS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRIMARYCRS, DefaultPrimaryCRS.class);
    }

    /**
     * Gets an instance of type PrimaryCRS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PrimaryCRS getPrimaryCRS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRIMARYCRS, DefaultPrimaryCRS.class);
    }

    /**
     * Gets all instances of PrimaryCRS from the ontology.
     */
    public Collection<? extends PrimaryCRS> getAllPrimaryCRSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRIMARYCRS, DefaultPrimaryCRS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#projectedCRS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#projectedCRS", ProjectedCRS.class, DefaultProjectedCRS.class);
    }

    /**
     * Creates an instance of type ProjectedCRS.  Modifies the underlying ontology.
     */
    public ProjectedCRS createProjectedCRS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECTEDCRS, DefaultProjectedCRS.class);
    }

    /**
     * Gets an instance of type ProjectedCRS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProjectedCRS getProjectedCRS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECTEDCRS, DefaultProjectedCRS.class);
    }

    /**
     * Gets all instances of ProjectedCRS from the ontology.
     */
    public Collection<? extends ProjectedCRS> getAllProjectedCRSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECTEDCRS, DefaultProjectedCRS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#region
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#region", Region.class, DefaultRegion.class);
    }

    /**
     * Creates an instance of type Region.  Modifies the underlying ontology.
     */
    public Region createRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REGION, DefaultRegion.class);
    }

    /**
     * Gets an instance of type Region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Region getRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REGION, DefaultRegion.class);
    }

    /**
     * Gets all instances of Region from the ontology.
     */
    public Collection<? extends Region> getAllRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REGION, DefaultRegion.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#restaurant
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#restaurant", Restaurant.class, DefaultRestaurant.class);
    }

    /**
     * Creates an instance of type Restaurant.  Modifies the underlying ontology.
     */
    public Restaurant createRestaurant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESTAURANT, DefaultRestaurant.class);
    }

    /**
     * Gets an instance of type Restaurant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Restaurant getRestaurant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESTAURANT, DefaultRestaurant.class);
    }

    /**
     * Gets all instances of Restaurant from the ontology.
     */
    public Collection<? extends Restaurant> getAllRestaurantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESTAURANT, DefaultRestaurant.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#road
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#road", Road.class, DefaultRoad.class);
    }

    /**
     * Creates an instance of type Road.  Modifies the underlying ontology.
     */
    public Road createRoad(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROAD, DefaultRoad.class);
    }

    /**
     * Gets an instance of type Road with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Road getRoad(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROAD, DefaultRoad.class);
    }

    /**
     * Gets all instances of Road from the ontology.
     */
    public Collection<? extends Road> getAllRoadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROAD, DefaultRoad.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#sandArea
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#sandArea", SandArea.class, DefaultSandArea.class);
    }

    /**
     * Creates an instance of type SandArea.  Modifies the underlying ontology.
     */
    public SandArea createSandArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SANDAREA, DefaultSandArea.class);
    }

    /**
     * Gets an instance of type SandArea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SandArea getSandArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SANDAREA, DefaultSandArea.class);
    }

    /**
     * Gets all instances of SandArea from the ontology.
     */
    public Collection<? extends SandArea> getAllSandAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SANDAREA, DefaultSandArea.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#school
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#school", School.class, DefaultSchool.class);
    }

    /**
     * Creates an instance of type School.  Modifies the underlying ontology.
     */
    public School createSchool(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHOOL, DefaultSchool.class);
    }

    /**
     * Gets an instance of type School with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public School getSchool(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHOOL, DefaultSchool.class);
    }

    /**
     * Gets all instances of School from the ontology.
     */
    public Collection<? extends School> getAllSchoolInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHOOL, DefaultSchool.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#sea
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#sea", Sea.class, DefaultSea.class);
    }

    /**
     * Creates an instance of type Sea.  Modifies the underlying ontology.
     */
    public Sea createSea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEA, DefaultSea.class);
    }

    /**
     * Gets an instance of type Sea with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sea getSea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEA, DefaultSea.class);
    }

    /**
     * Gets all instances of Sea from the ontology.
     */
    public Collection<? extends Sea> getAllSeaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEA, DefaultSea.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#square
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#square", Square.class, DefaultSquare.class);
    }

    /**
     * Creates an instance of type Square.  Modifies the underlying ontology.
     */
    public Square createSquare(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SQUARE, DefaultSquare.class);
    }

    /**
     * Gets an instance of type Square with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Square getSquare(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SQUARE, DefaultSquare.class);
    }

    /**
     * Gets all instances of Square from the ontology.
     */
    public Collection<? extends Square> getAllSquareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SQUARE, DefaultSquare.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#verticalCRS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#verticalCRS", VerticalCRS.class, DefaultVerticalCRS.class);
    }

    /**
     * Creates an instance of type VerticalCRS.  Modifies the underlying ontology.
     */
    public VerticalCRS createVerticalCRS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERTICALCRS, DefaultVerticalCRS.class);
    }

    /**
     * Gets an instance of type VerticalCRS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VerticalCRS getVerticalCRS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERTICALCRS, DefaultVerticalCRS.class);
    }

    /**
     * Gets all instances of VerticalCRS from the ontology.
     */
    public Collection<? extends VerticalCRS> getAllVerticalCRSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERTICALCRS, DefaultVerticalCRS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#verticalCS
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#verticalCS", VerticalCS.class, DefaultVerticalCS.class);
    }

    /**
     * Creates an instance of type VerticalCS.  Modifies the underlying ontology.
     */
    public VerticalCS createVerticalCS(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERTICALCS, DefaultVerticalCS.class);
    }

    /**
     * Gets an instance of type VerticalCS with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VerticalCS getVerticalCS(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERTICALCS, DefaultVerticalCS.class);
    }

    /**
     * Gets all instances of VerticalCS from the ontology.
     */
    public Collection<? extends VerticalCS> getAllVerticalCSInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERTICALCS, DefaultVerticalCS.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#verticalDatum
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#verticalDatum", VerticalDatum.class, DefaultVerticalDatum.class);
    }

    /**
     * Creates an instance of type VerticalDatum.  Modifies the underlying ontology.
     */
    public VerticalDatum createVerticalDatum(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERTICALDATUM, DefaultVerticalDatum.class);
    }

    /**
     * Gets an instance of type VerticalDatum with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VerticalDatum getVerticalDatum(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERTICALDATUM, DefaultVerticalDatum.class);
    }

    /**
     * Gets all instances of VerticalDatum from the ontology.
     */
    public Collection<? extends VerticalDatum> getAllVerticalDatumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERTICALDATUM, DefaultVerticalDatum.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#vineYard
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#vineYard", VineYard.class, DefaultVineYard.class);
    }

    /**
     * Creates an instance of type VineYard.  Modifies the underlying ontology.
     */
    public VineYard createVineYard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VINEYARD, DefaultVineYard.class);
    }

    /**
     * Gets an instance of type VineYard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VineYard getVineyard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VINEYARD, DefaultVineYard.class);
    }

    /**
     * Gets all instances of VineYard from the ontology.
     */
    public Collection<? extends VineYard> getAllVineyardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VINEYARD, DefaultVineYard.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#vineyard
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#vineyard", VineYard.class, DefaultVineYard.class);
    }

    /**
     * Creates an instance of type Vineyard.  Modifies the underlying ontology.
     */
    public VineYard createVineyard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VINEYARD, DefaultVineYard.class);
    }

    /**
     * Gets an instance of type Vineyard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VineYard getVineYard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VINEYARD, DefaultVineYard.class);
    }

    /**
     * Gets all instances of Vineyard from the ontology.
     */
    public Collection<? extends VineYard> getAllVineYardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VINEYARD, DefaultVineYard.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#wikipediaArticle
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#wikipediaArticle", WikipediaArticle.class, DefaultWikipediaArticle.class);
    }

    /**
     * Creates an instance of type WikipediaArticle.  Modifies the underlying ontology.
     */
    public WikipediaArticle createWikipediaArticle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WIKIPEDIAARTICLE, DefaultWikipediaArticle.class);
    }

    /**
     * Gets an instance of type WikipediaArticle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WikipediaArticle getWikipediaArticle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WIKIPEDIAARTICLE, DefaultWikipediaArticle.class);
    }

    /**
     * Gets all instances of WikipediaArticle from the ontology.
     */
    public Collection<? extends WikipediaArticle> getAllWikipediaArticleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WIKIPEDIAARTICLE, DefaultWikipediaArticle.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#wineFactory
     */

    {
        javaMapping.add("http://www.semanticweb.org/alperen/ontologies/2016/11/geolocation#wineFactory", WineFactory.class, DefaultWineFactory.class);
    }

    /**
     * Creates an instance of type WineFactory.  Modifies the underlying ontology.
     */
    public WineFactory createWineFactory(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WINEFACTORY, DefaultWineFactory.class);
    }

    /**
     * Gets an instance of type WineFactory with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WineFactory getWineFactory(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WINEFACTORY, DefaultWineFactory.class);
    }

    /**
     * Gets all instances of WineFactory from the ontology.
     */
    public Collection<? extends WineFactory> getAllWineFactoryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WINEFACTORY, DefaultWineFactory.class);
    }


}
